Virtual 3D Scanner

Works with Reshade (https://reshade.me/) to create a highly accurate 3D
reconstruction of a virtual scene.

Collecting Images, Normals and Depth:
1. Download reshade (important:) with add-on support
2. Download shaders from here: https://github.com/murchalloo/murchFX/tree/main
3. Clone the following repo like so:
    git clone https://github.com/murchalloo/reshade-addons --recurse-submodules
4. Use visual studio to compile the solution (Worked for me with no trouble, having used recurse-submodules as above).
5. Run reshade setup and select the game. Skip custom preset (unless you want to use one). Install the first basic set of utility shaders.
6. Navigate to the game's root directory on your disc. Some reshade stuff should be installed there already by now.
7. Copy-Paste DepthToAddon.fx into reshade-shaders/Shaders.
8. From your local reshade-addon repo, copy frame_capture.addon, etc. from the bin folder where they were compiled. Paste into the game's root directory.
9. Launch the game
10. Press Home to open reshade menu
11. Try out the DisplayDepth shader (not DepthToAddon just yet). You should see normal map on the left and depth map on the right.
    If maps not showing right: Navigate to Add-ons menu.
12. Expand "Generic Depth" settings
13. Play with the settings there such as "Copy depth buffer before clear operations". Look for settings that fixe the maps.
14. Now disable the DisplayDepth shader and enable the DepthToAddon shader.
15. Navigate to Add-ons menu.
16. Enable "Frame Capture" add-on.
17. "Frame Capture" should have its own settings menu on the right. Enable all the checkboxes in it.
18. Try F10. It should save depth, normal and backbuffer to the game's root directory. I was able to view the depth and normal maps with gimp.

*Note: Depth and Normal maps for the scene I used to develop this are upside down!

Organizing your data:
- Create a directory structure like so:
    <root-folder>
    + images <--- put the natural colour images here
    + depth <--- put the depth maps here
    + normal <--- put the normal maps here
- Ensure corresponding depth, colour, normal map have the same base name (i.e. disregarding extension).

Finding Camera Poses:
- If you don't have a way to find the camera poses yourself, we can use colmap to reconstruct them.
- I just used the colmap2nerf script from instant-ngp. (search up instant-ngp by nvidia on github)
    python instant-ngp\scripts\colmap2nerf.py --colmap_matcher sequential --run_colmap --aabb_scale 32 --colmap_camera_model SIMPLE_PINHOLE

Python Dependencies:
- numpy, torch
- opencv

Installing and Using This:
1. Clone this repo
2. Edit main.py to specify the correct path to the transforms file generated by colmap.

